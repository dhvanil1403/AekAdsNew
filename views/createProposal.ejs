<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Proposal</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
        integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">

    <script>
        // Safely parse screenProposal data from backend
        const screenProposal = JSON.parse('<%- JSON.stringify(screenProposal || []) %>');
        console.log("Screen Proposal Data:", screenProposal);
    </script>
</head>

<style>
    .table>:not(caption)>*>* {
        padding: .5rem .5rem;
        background-color: #fff !important;
        border-bottom-width: var(--bs-border-width);
        box-shadow: inset 0 0 0 9999px var(--bs-table-accent-bg);
    }

    .table-striped>tbody>tr:nth-of-type(odd)>* {
        background-color: #fff !important;
    }

    .table-hover>tbody>tr:hover>* {
        --bs-table-accent-bg: #fff !important;
        color: var(--bs-table-hover-color);
    }

    .table-striped>tbody>tr:nth-of-type(odd)>* {
        --bs-table-accent-bg: #fff !important;
        color: var(--bs-table-striped-color);
    }
</style>



<body style="background-color: #f1faff;padding: 12px">

    <div class="jayho">
        <h1 style="font-size: 23px; color: rgb(17, 17, 17)">PROPOSALS</h1>
        <svg width="36" id="show-proposal-form" height="36" viewBox="0 0 36 36" fill="none"
            xmlns="http://www.w3.org/2000/svg" id="openFormBtn3">
            <circle cx="17.625" cy="17.625" r="17.25" fill="#F9F9FA" stroke="#37393A" stroke-width="0.75" />
            <g clip-path="url(#clip0_4319_3938)">
                <path d="M18.0007 11.636V24.364" stroke="#37393A" stroke-width="1.5" stroke-linecap="round"
                    stroke-linejoin="round" />
                <path d="M11.6367 18H24.3646" stroke="#37393A" stroke-width="1.5" stroke-linecap="round"
                    stroke-linejoin="round" />
            </g>
            <defs>
                <clipPath id="clip0_4319_3938">
                    <rect width="18" height="18" fill="white" transform="translate(5.27344 18) rotate(-45)" />
                </clipPath>
            </defs>
        </svg>
    </div>


    <!-- Proposal Form Popup -->
    <div id="proposal-popup" style="display:none;">
        <div class="popup-content">
            <div class="header">

                <h6 style="font-size: 20px; margin-bottom: 1.5rem;">Create Proposal

                    <svg id="close-popup" style="float: right; cursor: pointer;" width="24" height="24"
                        viewBox="0 0 20 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M14.5712 5.81543L5.06641 17.3749" stroke="#37393A" stroke-width="2"
                            stroke-linecap="round" stroke-linejoin="round" />
                        <path d="M5.06641 5.81543L14.5712 17.3749" stroke="#37393A" stroke-width="2"
                            stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                </h6>
            </div>
            <form id="proposal-form" action="/proposals/create" method="POST" class="row g-3">
                <div class="col-12">
                    <label for="clientName" class="form-label">Client Name:</label>
                    <input type="text" id="clientName" name="clientName" class="form-control" required>
                </div>

                <div class="col-md-6">
                    <label for="startDate" class="form-label">Starts on:</label>
                    <input type="date" id="startDate" name="startDate" class="form-control" required>
                </div>

                <div class="col-md-6">
                    <label for="endDate" class="form-label">Runs For:</label>
                    <input type="number" id="endDate" name="endDate" class="form-control" required>
                </div>

                <div class="col-md-6">
                    <label for="slotDuration" class="form-label">Slot Duration:</label>
                    <input type="number" id="slotDuration" name="slotDuration" class="form-control" step="5" min="10"
                        required>
                </div>

                <div class="city-dropdown">
                    <h6>Cities</h6>
                    <div class="input-container" id="inputContainer">
                        <input type="text" class="form-control" name="cities" id="inputField"
                            placeholder="Click to select" required readonly style="width: 100%;">
                    </div>
                    <div class="dropdown" id="dropdownList">

                        <div class="dropdown-item" onclick="selectItem('Ahmedabad')">Ahmedabad</div>
                        <div class="dropdown-item" onclick="selectItem('Gandhinagar')">Gandhinagar</div>
                        <div class="dropdown-item" onclick="selectItem('Surat')">Surat</div>
                        <!-- Add other city options here -->
                    </div>
                    <!-- Hidden input field to store selected cities -->
                    <input type="hidden" name="selectedCities" id="selectedCities">
                </div>

                <div class="col-md-6">
                    <div class="col-md-6">
                        <label for="clientType" class="form-label">Client Type:</label>
                        <select id="clientType" name="clientType" class="form-select" required>
                            <option value="National Agency">National Agency</option>
                            <option value="Local Business">Local Business</option>
                            <option value="Direct Client (National)">Direct Client (National)</option>
                            <option value="Direct Client (Regional / Hyper-local)">Direct Client (Regional /
                                Hyper-local)</option>
                            <option value="GOVT/PSU">GOVT/PSU</option>
                        </select>

                    </div>
                </div>

                <div class="col-md-6">
                    <label for="propertyType" class="form-label">Property Type:</label>
                    <select id="propertyType" name="propertyType" class="form-select" required>
                        <option value="Residential">Residential</option>
                        <option value="Corporate">Corporate</option>

                        <option value="Commercial">Commercial</option>
                        <option value="Digital Billboard">Digital Billboard</option>
                    </select>
                </div>

                <div class="col-md-6">
                    <label for="plan" class="form-label">Plan:</label>
                    <select id="plan" name="plan" class="form-select" required>
                        <option value="Standard">Standard</option>
                        <option value="Premium">Premium</option>
                    </select>
                </div>

                <div class="col-md-6">
                    <label for="advertiserTag" class="form-label">Advertiser Tag:</label>
                    <input type="text" id="advertiserTag" name="advertiserTag" class="form-control" required>
                </div>
                <div class="col-md-6" style="display: flex;gap: 15px;">
                    <label for="popRequired" class="form-label">POP Required?</label>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="popRequired" name="popRequired">
                    </div>
                </div>

                <div class="col-md-6" style="display: flex;gap: 15px;">
                    <label for="geoTagging" class="form-label">Geo Tagging Required?</label>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="geoTagging" name="geoTagging">
                    </div>
                </div>




                <div class="col-12">
                    <button type="submit" class="btn btn-primary mt-3 w-100">Create Proposal</button>

                </div>
            </form>
        </div>
    </div>





   

    <style>
        /* Navbar styles */
        .navbar {
            /* display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 10px 20px;
                border-bottom: 2px solid #e0e4eb;
                margin: 1px auto; */
            width: 100%;
            max-width: 1600px;
            gap: 141px;
            margin: 1px auto;
            display: flex;
        }

        .nav-links {
            display: flex;
            gap: 190px;
            width: 100%;
        }

        .nav-links a {
            text-decoration: none;
            padding: 10px;
            color: #333;
            font-weight: bold;
        }

        .nav-links a.active,
        .nav-links a:hover {
            color: hsl(219, 94%, 48%);
            border-bottom: 3px solid hsl(219, 94%, 48%);
        }

        /* Menu icon for mobile */
        .menu-icon {
            display: none;
            cursor: pointer;
            width: 30px;
            height: 30px;
        }

        .menu-icon svg {
            width: 100%;
            height: 100%;
            fill: #333;
        }

        @media (max-width: 930px) {
            .nav-links {
                display: flex;
                gap: 170px;
                width: 100%;
            }
        }

        /* Mobile styles */
        @media (max-width: 768px) {
            .nav-links {
                width: 200px;
                display: none;
                flex-direction: column;
                gap: 10px;
                background-color: #f8f9fa;
                position: absolute;
                /* top: 60px; */
                margin-bottom: 55px;
                right: 20px;
                border: 1px solid #e0e4eb;
                padding: 10px;
                border-radius: 5px;
            }

            .nav-links a {
                text-align: left;
            }

            .menu-icon {
                display: block;
            }
        }
    </style>



    <div class="navbar">
        <div class="menu-icon" id="menuToggle">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M3 6h18M3 12h18M3 18h18" stroke="black" stroke-width="2" stroke-linecap="round"
                    stroke-linejoin="round" />
            </svg>
        </div>
        <div class="nav-links" id="navLinks">
            <a href="#" id="InDiscussionTab" class="active">In Discussion</a>
            <a href="#" id="pendingActivationTab">Pending Activation</a>
            <a href="#" id="activeTab">Active</a>
            <a href="#" id="discardTab">Discard</a>
        </div>
    </div>
    <div class="search-container">
        <div class="search-icon">
            <i class="fa-solid fa-magnifying-glass"></i>
        </div>
        <input type="text" class="search-input" id="searchInput" placeholder="Search" />
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const menuToggle = document.getElementById("menuToggle");
            const navLinks = document.getElementById("navLinks");

            menuToggle.addEventListener("click", function () {
                // Toggle visibility of the nav links
                if (navLinks.style.display === "flex") {
                    navLinks.style.display = "none";
                } else {
                    navLinks.style.display = "flex";
                }
            });

            window.addEventListener("resize", function () {
                if (window.innerWidth > 768) {
                    navLinks.style.display = "flex";
                } else {
                    navLinks.style.display = "none";
                }
            });
        });
    </script>


    <style>
        /* Custom Popup Style */
        #proposal-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            /* Default to 90% width for mobile */
            max-width: 1100px;
            /* Max width for desktop */
            background-color: #fff;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            padding: 30px;
            border-radius: 10px;
        }

        /* Desktop view - no scroll on larger screens unless overflow */
        @media (min-width: 769px) {
            #proposal-popup {
                max-height: none;
                overflow-y: visible;
            }
        }

        /* Mobile view - enable scrollbar when content exceeds screen height */
        @media (max-width: 768px) {
            #proposal-popup {
                max-height: 90vh;
                /* Limit the height to 90% of the viewport */
                overflow-y: auto;
                /* Enable vertical scroll if content overflows */
                padding: 15px;
            }
        }

        /* Button styles */
        button#close-popup {
            background-color: #dc3545;
            color: white;
            margin-top: 10px;
        }

        button#close-popup:hover {
            background-color: #c82333;
        }




        /* Popup heading */
        #proposal-popup h2 {
            text-align: center;
            margin-bottom: 20px;
            font-size: 2rem;
        }

        @media (max-width: 768px) {
            #proposal-popup h2 {
                font-size: 1.5rem;
            }
        }

        /* Search container */
        .search-container {
            margin: 1px auto;
            width: 100%;
            max-width: 1600px;
            display: flex;
            align-items: center;
            background: rgba(28, 28, 28, 0.05);
            border: 1px solid #ddd;
            padding: 10px 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.25);
            border-radius: 10px;
            margin-bottom: 1.5%;
        }

        .search-icon {
            margin-right: 10px;
            display: flex;
            align-items: center;
        }

        .search-input {
            border: none;
            outline: none;
            background-color: transparent;
            width: 100%;
            font-size: 16px;
        }

        /*1 table */
        .table1 {

            margin: 1px auto;
            width: 100%;
            max-width: 1600px;
            background: rgba(255, 255, 255, 1);
            border-radius: 15px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.25);
            overflow-x: auto;
            white-space: nowrap;
            position: relative;
            max-height: 600px;
            height: 64%;
        }

        /* Mobile view adjustments */
        @media (max-width: 576px) {
            .table1 {
                max-width: 100%;
                height: auto;
                max-height: 400px;
                border-radius: 10px;
            }

            table,
            thead,
            tbody,
            th,
            td,
            tr {
                display: block;
            }

            tr {
                margin-bottom: 10px;
            }

            td {

                display: grid;
                justify-content: space-between;
                padding: 10px;
                border: none;
            }

            td::before {
                content: attr(data-label);
                font-weight: bold;
            }
        }

        /* Tablet view */
        @media (min-width: 577px) and (max-width: 768px) {
            .table1 {
                max-width: 100%;
                height: auto;
                max-height: 500px;
                padding: 5px;
            }
        }

        /* Desktop view */
        @media (min-width: 769px) {
            .table1 {
                max-width: 1200px;
                height: auto;
                max-height: 600px;
                padding: 10px;
            }
        }

        /* Large desktop view */
        @media (min-width: 1200px) {
            .table1 {
                max-width: 1600px;
                height: 64%;
                max-height: 600px;
            }
        }

        /* Striped table rows */
        .table-striped>tbody>tr:nth-of-type(odd)>* {
            background-color: #f9f9f9;
        }

        /* Flexbox utility */
        .jayho {
            display: flex;
            gap: 6px;
            margin: 35px auto;
            width: 323px;
        }


        th {
            color: rgb(0, 0, 0);
            font-size: 14px;
            font-weight: 500;
            background-color: #f8f9fa;
            /* position: sticky;
                top: 0; */
            padding: 10px 0;
            border-bottom: 1px solid #dee2e6;
            text-align: center;
        }

        thead {
            position: sticky;
            top: -2px;
        }

        /* Basic table styling */
        table {
            width: 100%;
            border-collapse: collapse;
        }

        td,
        th {
            padding: 8px;
            text-align: left;
            /* border: 1px solid #ddd; */
        }

        /* Navbar */
        /* .navbar {
  display: flex;
  justify-content: space-around;
  padding: 10px;
  } */


        /* City Dropdown */
        .city-dropdown {
            position: relative;
            margin-bottom: 20px;
        }

        #dropdownList {
            position: absolute;
            width: 100%;
            max-height: 150px;
            overflow-y: auto;
            background-color: #fff;
            border: 1px solid #ddd;
            display: none;
            z-index: 10;
        }

        #dropdownList .dropdown-item {
            padding: 10px;
            cursor: pointer;
        }

        #dropdownList .dropdown-item:hover {
            background-color: #f0f0f0;
        }

        /* Margin utility */
        .mt-4 {
            margin-top: 0 !important;
        }
    </style>


    <!-- In Discussion Table -->
    <div id="inDiscussionTable" class="table-container">
        <div class="table1" style="height: 587px;">
            <% if (proposals.length > 0) { %>
                <table class="table table-striped table-hover mt-4">
                    <thead class="table-primary">
                        <tr>
                            <th style="font-size: 16px;">Proposal Name</th>
                            <th style="font-size: 16px;">Order Value</th>
                            <th style="font-size: 16px;">Campaign Information</th>
                            <th style="font-size: 16px;">Reach</th>
                            <th style="font-size: 16px;">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% proposals.forEach(proposal => { %>
                            <tr>
                                <!-- Proposal Name and Dates -->
                                <td>
                                    <%= proposal.client_name %><br>
                                    <% 
                                        const startDate = new Date(proposal.start_date);
                                        const endDate = new Date(startDate);
                                        if (!isNaN(startDate) && !isNaN(proposal.end_date)) {
                                            endDate.setDate(startDate.getDate() + proposal.end_date);
                                        }
                                    %>
                                    <%= !isNaN(startDate) && !isNaN(endDate) 
                                        ? startDate.toLocaleDateString() + ' - ' + endDate.toLocaleDateString() 
                                        : 'Invalid dates' %>
                                </td>
    
                                <!-- Order Value -->
                                <td>
                                    <%= proposal.order_value || 'N/A' %>
                                </td>
    
                                <!-- Campaign Information -->
                                <td>
                                    <% 
                                        const citiesArray = proposal.cities 
                                            ? proposal.cities.split(',').map(city => city.trim()) 
                                            : []; 
                                    %>
                                    <%= citiesArray.length %> cities, <%= proposal.total_screens %> screens,<br>
                                    <%= proposal.total_properties %> sites
                                </td>
    
                                <!-- Reach -->
                                <td>
                                    <strong><%= proposal.total_approx_reach %></strong>
                                </td>
    
                                <!-- Actions -->
                                <td>
                                    <div>
                                        <a href="<%= proposal.pop_required 
                                            ? '/proposals/popRequired?proposalID=' + proposal.id 
                                            : '/proposals/pricing?proposalID=' + proposal.id %>" 
                                            style="text-decoration: none;">
                                            <button class="btn btn-primary">Edit</button>
                                        </a>
    
                                        <a href="javascript:void(0);" 
                                           onclick="pendingActivationProposal('<%= proposal.id %>')" 
                                           style="text-decoration: none;">
                                            <button class="btn btn-primary">Submit</button>
                                        </a>
    
                                        <a href="javascript:void(0);" 
                                           onclick="discardProposal('<%= proposal.id %>')" 
                                           style="text-decoration: none;">
                                            <button class="btn btn-danger">Discard</button>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            <% } else { %>
                <p>No proposals available.</p>
            <% } %>
        </div>
    </div>
    
    


 
    <script>
        
        async function pendingActivationProposal(proposalId) {
    try {
        // Show loading SweetAlert when the function is called
        Swal.fire({
            title: 'Submitting Proposal...',
            text: 'Please wait while the proposal is being processed.',
            icon: 'info',
            showConfirmButton: false,
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading(); // Show loading spinner
            }
        });

        // Perform the fetch request to the backend
        const response = await fetch('/proposals/SetpendingActivation', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ proposalId: proposalId }),
        });

        // Check if response is okay
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Network response was not ok: ${errorText}`);
        }

        // Parse the JSON response
        const data = await response.json();

        // Close loading alert and show success message
        Swal.fire({
            title: 'Success!',
            text: data.message || 'Proposal successfully updated.',
            icon: 'success',
            confirmButtonText: 'OK'
        });

        console.log('Success response:', data); // Log success response if needed

    } catch (error) {
        // Handle errors: close loading alert and show error message
        Swal.fire({
            title: 'Error!',
            text: 'There was an error submitting the proposal: ' + error.message,
            icon: 'error',
            confirmButtonText: 'OK'
        });

        console.error('Error:', error); // Log the error for debugging
    }
}



















































        function discardProposal(proposalId) {
            // Show the loading SweetAlert before sending the request
            const swalLoading = Swal.fire({
                title: 'Processing...',
                text: 'Your proposal is being discarded.',
                icon: 'info',
                allowOutsideClick: false,  // Prevent closing during the process
                showConfirmButton: false,  // Hide the confirm button
                didOpen: () => {
                    Swal.showLoading();  // Show loading spinner
                }
            });

            // Send the request to the server
            fetch('/proposals/SetDiscarded', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ proposalId: proposalId }),
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();  // If response is okay, parse it as JSON
                    } else {
                        return response.text().then(text => {
                            throw new Error(`Network response was not ok: ${text}`);  // If response is not okay, throw an error
                        });
                    }
                })
                .then(data => {
                    // After the data is saved, close the loading spinner and show success SweetAlert
                    swalLoading.close();  // Close the loading SweetAlert

                    Swal.fire({
                        title: 'Success!',
                        text: 'Proposal discarded successfully!',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        location.reload();  // Reload the page after confirmation
                    });
                })
                .catch(error => {
                    // If there's an error, close the loading SweetAlert and show error message
                    swalLoading.close();  // Close the loading SweetAlert

                    Swal.fire({
                        title: 'Error!',
                        text: 'There was an error discarding the proposal: ' + error.message,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
        }

        function setToAdminAproval(proposalId) {
            // Show the loading SweetAlert before sending the request
            const swalLoading = Swal.fire({
                title: 'Processing...',
                text: 'Your proposal is being updated.',
                icon: 'info',
                allowOutsideClick: false,  // Prevent closing during the process
                showConfirmButton: false,  // Hide the confirm button
                didOpen: () => {
                    Swal.showLoading();  // Show loading spinner
                }
            });

            // Send the request to the server
            fetch('/proposals/setToAdminAproval', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ proposalId: proposalId }),
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();  // If response is okay, parse it as JSON
                    } else {
                        return response.text().then(text => {
                            throw new Error(`Network response was not ok: ${text}`);  // If response is not okay, throw an error
                        });
                    }
                })
                .then(data => {
                    // After the data is saved, close the loading spinner and show success SweetAlert
                    swalLoading.close();  // Close the loading SweetAlert

                    Swal.fire({
                        title: 'Success!',
                        text: 'Proposal updated successfully!',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        location.reload();  // Reload the page after confirmation
                    });
                })
                .catch(error => {
                    // If there's an error, close the loading SweetAlert and show error message
                    swalLoading.close();  // Close the loading SweetAlert

                    Swal.fire({
                        title: 'Error!',
                        text: 'There was an error updating the proposal: ' + error.message,
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
        }


    </script>



    <!-- Pending Activation Table -->
    <div id="pendingActivationTable" class="table-container" style="display:none;">
        <div class="table1" style="height: 587px">
            <table class="table table-striped table-hover mt-4">
                <thead class="table-primary">
                    <tr>
                        <th style="font-size: 16px;">Proposal Name</th>
                        <th style="font-size: 16px;">Order Value</th>
                        <th style="font-size: 16px;">Campaign Information</th>
                        <th style="font-size: 16px;">Reach</th>
                        <th style="font-size: 16px;">Action</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (pendingProposals && pendingProposals.length > 0) { %>
                        <% pendingProposals.forEach(function(proposal) { %>
                            <% 
                                // Calculate the start and end date
                                const startDate = new Date(proposal.start_date);
                                const endDate = new Date(startDate);
                                endDate.setDate(startDate.getDate() + proposal.end_date);
                
                                // Split the cities string into an array and trim extra spaces
                                const citiesArray = proposal.cities.split(',').map(city => city.trim());
                            %>
                
                            <tr>
                                <td>
                                    <%= proposal.client_name %><br>
                                    <%= startDate.toLocaleDateString() %> - <%= endDate.toLocaleDateString() %>
                                </td>
                
                                <td>
                                    <%= proposal.order_value || 'N/A' %>
                                </td>
                
                                <td>
                                    <%= citiesArray.length %> cities, <%= proposal.total_screens %> screens,
                                    <br>
                                    <%= proposal.total_properties %> sites
                                </td>
                
                                <td>
                                    <strong><%= proposal.total_approx_reach %></strong><br>
                                </td>
                
                                <td>
                                    <div>
                                        <a href="#" onclick="setToAdminAproval('<%= proposal.id %>')" style="text-decoration: none;">
                                            <button class="btn btn-primary">Active</button>
                                        </a>
                                        <a href="#" onclick="discardProposal('<%= proposal.id %>')" style="text-decoration: none;">
                                            <button class="btn btn-danger">Discard</button>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="5">No pending proposals available.</td>
                        </tr>
                    <% } %>
                </tbody>
                
            </table>
        </div>
    </div>
    <!-- Active Table -->
    <div id="activeTable" class="table-container" style="display:none;">
        <div class="table1" style="height: 587px">
            <table class="table table-striped table-hover mt-4">
                <thead class="table-primary">
                    <tr>
                        <th style="font-size: 16px;">Proposal Name</th>
                        <th style="font-size: 16px;">Order Value</th>
                        <th style="font-size: 16px;">Campaign Information</th>
                        <th style="font-size: 16px;">Reach</th>
                        <th style="font-size: 16px;">Status</th>
                        <th style="font-size: 16px;">Action</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (waitingOrActive && waitingOrActive.length > 0) { %>
                        <% waitingOrActive.forEach(function(proposal) { %>
                            <% 
                                // Calculate the end date by adding the end_date to the start date
                                const startDate = new Date(proposal.start_date);
                                const endDate = new Date(startDate);
                                endDate.setDate(startDate.getDate() + proposal.end_date);
    
                                // Split the cities by comma and count the number of cities
                                const citiesArray = proposal.cities.split(',').map(city => city.trim());
                            %>
    
                            <tr>
                                <td>
                                    <%= proposal.client_name %><br>
                                    <%= startDate.toLocaleDateString() %> - <%= endDate.toLocaleDateString() %>
                                </td>
    
                                <td>
                                    <%= proposal.order_value || 'N/A' %>
                                </td>
    
                                <td>
                                    <%= citiesArray.length %> cities, <%= proposal.total_screens %> screens,<br>
                                    <%= proposal.total_properties %> sites
                                </td>
    
                                <td>
                                    <strong><%= proposal.total_approx_reach %></strong><br>
                                </td>
    
                                <td>
                                    <%= proposal.status || 'No data' %>
                                </td>
    
                                <td>
                                    <% if (proposal.status === 'Active') { %>
                                        <button class="btn btn-primary"
                                            onclick="window.location.href = '/proposals/creativeUploadEdit?proposalID=<%= proposal.id %>'">Edit Content</button>
                                    <% } %>
    
                                    <a href="#" style="text-decoration: none;"
                                        onclick="showPreview('<%= proposal.url1 %>', '<%= proposal.url2 %>', '<%= proposal.url3 %>', '<%= proposal.url4 %>', '<%= proposal.pdf_file_url %>', '<%= proposal.pdf_original_file_name %>', '<%= proposal.property_ids %>', '<%= proposal.property_names %>')">
                                        <button class="btn btn-primary">Preview</button>
                                    </a>
                                </td>
                            </tr>
    
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="6">No active proposals available.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
    
    <div id="previewPopup" class="popup-container" style="display: none;">
        <div class="popup-content1">
            <span class="close" onclick="closePopup()">&times;</span>
            <h3>Video Previews</h3>
            <div id="videoRow" class="video-row">
                <!-- Videos will be dynamically added here -->
            </div>
            <h3>Purchase Order</h3>
            <a id="purchaseOrderLink" href="" target="_blank" download></a>
            <div class="table-wrapper">
                <table>
                    <thead>
                        <tr>
                            <th>Sr No.</th>
                            <th style="font-size: 16px;">Screen Id</th>
                            <th style="font-size: 16px;">Screen Name</th>
                            <th style="font-size: 16px;">Slot Number</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Table rows will be dynamically added here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <style>
        .popup-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .popup-content1 {
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            width: 80%;
            max-width: 900px;
            height: 97%;
            /* Set maximum height to 97% of the viewport */
            overflow-y: auto;
            /* Enables vertical scrolling for overflowing content */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            position: relative;
        }


        .popup-content1 h3 {
            margin: 10px 0;
        }

        .video-row {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 10px;
            margin: 20px 0;
        }

        .video-row video {
            flex: 1;
            max-width: 22%;
            height: auto;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .table-wrapper {
            max-height: 380px;
            /* Adjust table height as needed */
            overflow-y: auto;
            /* Enables vertical scrolling */
            margin-top: 20px;
            border: 1px solid #ccc;
            /* Optional: Adds a border around the scrollable table */
            border-radius: 8px;
            /* Optional: Rounded corners */
        }

        .table-wrapper table {
            width: 100%;
            border-collapse: collapse;
        }

        .table-wrapper table th,
        .table-wrapper table td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }

        .table-wrapper table th {
            background-color: #f8f8f8;
            position: sticky;
            top: 0;
            /* Keeps table header visible while scrolling */
            z-index: 1;
            /* Ensures header stays above content */
        }

        .close {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 20px;
            font-weight: bold;
            cursor: pointer;
            color: #333;
        }
    </style>
    <!-- Discard Table -->
    <div id="discardTable" class="table-container" style="display:none;">
    <div class="table1" style="height: 587px">
        <table class="table table-striped table-hover mt-4">
            <thead class="table-primary">
                <tr>
                    <th style="font-size: 16px;">Proposal Name</th>
                    <th style="font-size: 16px;">Order Value</th>
                    <th style="font-size: 16px;">Campaign Information</th>
                    <th style="font-size: 16px;">Reach</th>
                  
                </tr>
            </thead>
            <tbody>
                <% if (discardProposals && discardProposals.length > 0) { %>
                    <% discardProposals.forEach(proposal => { %>
                        <% const startDate = new Date(proposal.start_date); %>
                        <% const endDate = new Date(startDate); %>
                        <% if (!isNaN(startDate) && !isNaN(proposal.end_date)) { %>
                            <% endDate.setDate(startDate.getDate() + proposal.end_date); %>
                        <% } %>

                        <% const citiesArray = proposal.cities 
                            ? proposal.cities.split(',').map(city => city.trim()) 
                            : []; %>
                        <tr>
                            <!-- Proposal Name and Dates -->
                            <td>
                                <%= proposal.client_name %><br>
                                <%= !isNaN(startDate) && !isNaN(endDate) 
                                    ? startDate.toLocaleDateString() + ' - ' + endDate.toLocaleDateString() 
                                    : 'Invalid dates' %>
                            </td>

                            <!-- Order Value -->
                            <td>
                                <%= proposal.order_value || 'N/A' %>
                            </td>

                            <!-- Campaign Information -->
                            <td>
                                <%= citiesArray.length %> cities, 
                                <%= proposal.total_screens %> screens,<br>
                                <%= proposal.total_properties %> sites
                            </td>

                            <!-- Reach -->
                            <td>
                                <strong><%= proposal.total_approx_reach %></strong>
                            </td>

                        </tr>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td colspan="5">No discarded proposals available.</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>
</div>








    <script>
        $(document).ready(function () {
            $('#show-proposal-form').on('click', function () {
                $('#proposal-popup').show();
            });

            $('#close-popup').on('click', function () {
                $('#proposal-popup').hide();
            });
        });



        const inputField = document.getElementById('inputField');
        const dropdownList = document.getElementById('dropdownList');
        const selectedCities = document.getElementById('selectedCities');
        let cities = []; // Array to store selected cities

        function selectItem(city) {
            // If city is already selected, remove it from the list
            if (cities.includes(city)) {
                cities = cities.filter(c => c !== city);
            } else {
                cities.push(city); // Add city to the list if not already selected
            }

            // Update the input field to show selected cities
            inputField.value = cities.join(', ');
            // Store selected cities in the hidden input
            selectedCities.value = cities.join(', ');

            // Hide dropdown if the user is done selecting (optional)
            // dropdownList.style.display = 'none'; 
        }

        inputField.addEventListener('click', () => {
            dropdownList.style.display = dropdownList.style.display === 'block' ? 'none' : 'block';
        });

        document.addEventListener('click', function (event) {
            if (!inputField.contains(event.target) && !dropdownList.contains(event.target)) {
                dropdownList.style.display = 'none';
            }
        });








        const tabs = document.querySelectorAll('.navbar a');
        const tables = {
            'InDiscussionTab': document.getElementById('inDiscussionTable'),
            'pendingActivationTab': document.getElementById('pendingActivationTable'),
            'activeTab': document.getElementById('activeTable'),
            'discardTab': document.getElementById('discardTable')
        };

        tabs.forEach(tab => {
            tab.addEventListener('click', function (e) {
                e.preventDefault();
                tabs.forEach(t => t.classList.remove('active')); // Remove active class from all tabs
                this.classList.add('active'); // Add active class to clicked tab

                Object.values(tables).forEach(table => table.style.display = 'none'); // Hide all tables
                tables[this.id].style.display = 'block'; // Show the corresponding table
            });
        });








        function showPreview(url1, url2, url3, url4, pdfUrl, pdfName, propertyIds, propertyNames) {
    console.log("Raw Video Data:", url1, url2, url3, url4);

    const videoRow = document.getElementById("videoRow");
    const purchaseOrderLink = document.getElementById("purchaseOrderLink");
    const tableBody = document.querySelector("#previewPopup table tbody");

    // Clear existing content
    videoRow.innerHTML = '';
    tableBody.innerHTML = '';

    // Function to safely extract video_url from the JSON string or direct URL
    function extractVideoUrl(data) {
        try {
            const parsedData = JSON.parse(data);
            return parsedData.video_url || "";
        } catch (error) {
            return data; // Return the data directly if it's not JSON
        }
    }

    // Add videos dynamically
    [url1, url2, url3, url4].forEach((url, index) => {
        const videoUrl = extractVideoUrl(url);
        if (videoUrl) {
            console.log(`Adding video ${index + 1}:`, videoUrl);
            const video = document.createElement("video");
            video.src = videoUrl;
            video.controls = true;
            videoRow.appendChild(video);
        }
    });

    // Set the purchase order link
    purchaseOrderLink.href = pdfUrl;
    purchaseOrderLink.textContent = pdfName || "Download Purchase Order";

    // Map propertyIds to propertyNames
    const propertyIdArray = propertyIds.split(',').map(id => id.trim());
    const propertyNameArray = propertyNames.split(',').map(name => name.trim());

    // Create a map from screenProposal for quick lookup
    const screenMap = {};
    screenProposal.forEach(screen => {
        screenMap[screen.screenid] = screen.screenname;
    });

    // Populate table rows
    propertyIdArray.forEach((id, index) => {
        const screenId = id || "Unknown";
        const screenName = screenMap[screenId] || "Unknown";
        const slotName = propertyNameArray[index] || "Unknown Slot";

        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${index + 1}</td>
            <td>${screenId}</td>
            <td>${screenName}</td>
            <td>${slotName}</td>
        `;
        tableBody.appendChild(row);
    });

    // Show the popup
    document.getElementById("previewPopup").style.display = "flex";
}

       
       
        function closePopup() {
            document.getElementById("previewPopup").style.display = "none";
        }


    




    </script>




    <style>
        .table>:not(caption)>*>* {
            padding: .5rem .5rem;
            border-bottom-width: var(--bs-border-width);
            box-shadow: inset 0 0 0 9999px var(--bs-table-accent-bg);
        }

        td {
            background-color: #fff;
        }
    </style>
    <br>

  

    <a href="/logout" class="btn btn-danger">Logout</a>
</body>

</html>
